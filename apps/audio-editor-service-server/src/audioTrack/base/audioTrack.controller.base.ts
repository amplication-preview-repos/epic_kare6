/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AudioTrackService } from "../audioTrack.service";
import { AudioTrackCreateInput } from "./AudioTrackCreateInput";
import { AudioTrack } from "./AudioTrack";
import { AudioTrackFindManyArgs } from "./AudioTrackFindManyArgs";
import { AudioTrackWhereUniqueInput } from "./AudioTrackWhereUniqueInput";
import { AudioTrackUpdateInput } from "./AudioTrackUpdateInput";

export class AudioTrackControllerBase {
  constructor(protected readonly service: AudioTrackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AudioTrack })
  async createAudioTrack(
    @common.Body() data: AudioTrackCreateInput
  ): Promise<AudioTrack> {
    return await this.service.createAudioTrack({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AudioTrack] })
  @ApiNestedQuery(AudioTrackFindManyArgs)
  async audioTracks(@common.Req() request: Request): Promise<AudioTrack[]> {
    const args = plainToClass(AudioTrackFindManyArgs, request.query);
    return this.service.audioTracks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AudioTrack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audioTrack(
    @common.Param() params: AudioTrackWhereUniqueInput
  ): Promise<AudioTrack | null> {
    const result = await this.service.audioTrack({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AudioTrack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudioTrack(
    @common.Param() params: AudioTrackWhereUniqueInput,
    @common.Body() data: AudioTrackUpdateInput
  ): Promise<AudioTrack | null> {
    try {
      return await this.service.updateAudioTrack({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AudioTrack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudioTrack(
    @common.Param() params: AudioTrackWhereUniqueInput
  ): Promise<AudioTrack | null> {
    try {
      return await this.service.deleteAudioTrack({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
