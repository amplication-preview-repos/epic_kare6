/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AudioTrack as PrismaAudioTrack } from "@prisma/client";

export class AudioTrackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AudioTrackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.audioTrack.count(args);
  }

  async audioTracks<T extends Prisma.AudioTrackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioTrackFindManyArgs>
  ): Promise<PrismaAudioTrack[]> {
    return this.prisma.audioTrack.findMany<Prisma.AudioTrackFindManyArgs>(args);
  }
  async audioTrack<T extends Prisma.AudioTrackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioTrackFindUniqueArgs>
  ): Promise<PrismaAudioTrack | null> {
    return this.prisma.audioTrack.findUnique(args);
  }
  async createAudioTrack<T extends Prisma.AudioTrackCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioTrackCreateArgs>
  ): Promise<PrismaAudioTrack> {
    return this.prisma.audioTrack.create<T>(args);
  }
  async updateAudioTrack<T extends Prisma.AudioTrackUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioTrackUpdateArgs>
  ): Promise<PrismaAudioTrack> {
    return this.prisma.audioTrack.update<T>(args);
  }
  async deleteAudioTrack<T extends Prisma.AudioTrackDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AudioTrackDeleteArgs>
  ): Promise<PrismaAudioTrack> {
    return this.prisma.audioTrack.delete(args);
  }
}
